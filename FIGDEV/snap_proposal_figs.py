from matplotlib import pyplot as pl
from matplotlib import cm
import numpy as np
from astropy.io import ascii
import sys
import os

thisfile = sys.argv[0]
# when running from ipython, sys.argv[0] points to the python bin dir instead
# of the source directory containing the pipeline code
if 'ipython' in thisfile: thisfile = __file__
thisdir = os.path.dirname(thisfile)

_datfile = 'lensed_galaxies.txt'


def maghist(datfile=_datfile, expand=False, debug=False):
    if debug:
        import pdb
        pdb.set_trace()

    # Read in the A1689 multiply imaged galaxy catalog
    dat = ascii.read(datfile)
    igal = dat['gal']
    iim = dat['im']
    z = np.abs(dat['z'])
    izphot = np.where(dat['z']<0)[0]
    izspec = np.where(dat['z']>0)[0]
    mu = dat['mu']
    itoohigh = np.where(mu>25)[0]
    mu[itoohigh] = np.random.random(len(itoohigh))*10+20
    idx = dat['idx'] - 1

    if expand :
        # Expand the A1689 catalog by a factor of 4, applying random offsets to
        # get a mock catalog representing the full sample
        zoffsets = np.random.normal(loc=0.0, scale=0.3, size=len(z)*4)
        z4 = np.array( 4 * z.tolist() ) + zoffsets
        muoffsets = np.random.normal(loc=0.0, scale=1.0, size=len(mu)*4)
        mu4 = np.abs( np.array(4 * mu.tolist() ) + muoffsets )
        idx4 = np.array( 4 * idx.tolist() )
        igal4 = np.array( 4 * igal.tolist() )
        z = z4
        mu = mu4
        idx = idx4
        igal = igal4

    imaxmags = []
    iminmags = []
    for ig in np.unique(igal):
        idx_thisgal = idx[np.where(igal == ig)]
        mu_thisgal = mu[idx_thisgal]
        imaxmags.append(idx_thisgal[np.argmax(mu_thisgal)])
        iminmags.append(idx_thisgal[np.argmin(mu_thisgal)])

    imaxmag = np.array( [ np.argmax(idx[np.where(igal == igal)])
                          for igal in np.unique(igal) ] )
    iminmag = np.array( [ np.argmin(mu[np.where(igal == igal)])
                        for igal in np.unique(igal)])
    # mu12diff = mu[imaxmags] - mu[iminmags]

    pl.clf()

    pl.subplot(1,3,1)
    pl.plot(z[iminmags], mu[iminmags], color='b', marker='o', alpha=0.3,
            ms=10, ls=' ')
    pl.plot(z[imaxmags], mu[imaxmags], color='r', marker='s', alpha=0.3,
            ms=10, ls=' ')

    pl.subplot( 1, 3, 2 )
    maxmaghist2d, xedges, yedges = np.histogram2d(z[imaxmags], mu[imaxmags],
                                                  bins=15)
    minmaghist2d, xedges, yedges= np.histogram2d(z[iminmags], mu[iminmags],
                                                 bins=15)
    # pl.contour(z[imaxmags], mu[imaxmags], maxmaghist2d )
    pl.contour( xedges[:-1], yedges[:-1],
                maxmaghist2d, colors='r',
    )
    # 4,2,0] )
    # pl.contour( minmaghist2d, colors='b', levels=[4,2,0] )

    # pl.hist2d(z[iminmags], mu[iminmags], bins=15)


    pl.subplot(1,3,3)
    pl.hist2d(z[imaxmags], mu[imaxmags], bins=15)

def plot_tvis_lines( snIadatfile='snIa_tvis.dat', snIIdatfile='snII_tvis.dat'  ):
    """ Plot SN visibility time vs redshift for a range of mu values using
    .dat tables generated by snapsim.py
    """
    dat1 = ascii.read( snIadatfile, header_start=2 )
    dat2 = ascii.read( snIIdatfile, header_start=2 )

    mulist = [2,4,6,10,15,20]
    mucolorlist = ['m','b','c','g','r','k']

    pl.clf()
    ax1 = pl.subplot( 1,2,1 )
    ax2 = pl.subplot( 1,2,2, sharex=ax1, sharey=ax1 )

    for dat,ax,sntype in zip( [dat1,dat2], [ax1,ax2], ['Ia','II']) :

        z = np.array( dat['z'] )
        for mu, mucolor in zip(mulist,mucolorlist) :
            tvis = np.array( dat['tvis%02i'%mu] )
            err = np.array( dat['err%02i'%mu] )
            tvismax = tvis + err
            tvismin = np.max( [np.zeros(len(tvis)), tvis-err], axis=0 )
            # ax.fill_between( z, tvismin, tvismax, color=mucolor, alpha=0.3 )
            ax.plot( z, tvis, marker=' ', ls='-', color=mucolor, label='%i'%mu )
            z10 = z[ np.where(tvis<12)[0][0] ]
            ax.text( z10,10, '%i'%mu, color=mucolor, ha='center', va='center',
                     backgroundcolor='w' )

        # ax.legend(loc='upper right')
        ax.set_xlabel('Redshift')
        ax.set_ylabel('Visibility Time [days]')
        ax.text(0.95,0.95,'Type %s SN'%sntype, ha='right',va='top',
                transform=ax.transAxes, fontsize='large' )
        ax.set_ylim( 0, 140 )
        ax.set_xlim( 0.8, 3.2 )
        ax.text(1.0,10,'$\mu$=',ha='right',va='center',
                backgroundcolor='w' )

    fig = pl.gcf()
    fig.subplots_adjust( left=0.12, right=0.88, bottom=0.12, top=0.95, wspace=0 )

    ax2.yaxis.set_ticks_position('right')
    ax2.yaxis.set_label_position('right')
    ax2.yaxis.set_ticks_position('both')
    ax2.set_ylabel('Visibility Time [years]', rotation=-90 )

    # ax1.set_xlim(0.9,3.2)

    ax2.set_yticks( np.array([0.1,0.2,0.3])*365 )

    ax2.set_yticklabels( [0.1,0.2,0.3] )

    ax1.set_ylim(0,120)

    return( dat1, dat2 )


def mk_tvis_fig( etime=30, obsdat=_datfile, expand=False, points=True ):
    import plotsetup

    dat1 = 'snIa_F140W_%02imin_tvis.dat'%etime
    dat2 = 'snII_F110W_%02imin_tvis.dat'%etime

    plotsetup.fullpaperfig( figsize=[10,5] )
    ax1 = pl.subplot( 121 )
    plot_tvis_contours( dat=dat1, obsdat=obsdat, expand=expand, points=points, ls='solid' )
    # plot_tvis_contours( dat=dat3, obsdat=obsdat, expand=expand, points=points, ls='dashed' )
    ax1.text( 0.05, 0.95, 'Type Ia\n Visibility\n Windows\n for %02i min \n F140W snaps'%etime, transform=ax1.transAxes, ha='left', va='top', fontsize='large' )
    ax1.text( 1.85,22.4,r'130 days', rotation=75, color='darkred', backgroundcolor='w', ha='center', fontsize=12 )
    ax1.text( 2.25,22.4,'100', ha='center', rotation=75, color='darkorange', backgroundcolor='w',fontsize=12 )
    ax1.text( 2.76,22.4,'70', ha='center', rotation=85, color='darkcyan', backgroundcolor='w',fontsize=12 )
    ax1.text( 2.97,22.4,'40', ha='center', rotation=85, color='darkblue', backgroundcolor='w',fontsize=12 )
    ax1.text( 3.10,22.4,'10', ha='center', rotation=85, color='darkorchid', backgroundcolor='w',fontsize=12 )

    ax2 = pl.subplot( 122 )
    # plot_tvis_contours( dat=dat2, obsdat=obsdat, expand=expand, points=points, ls='solid' )
    plot_tvis_contours( dat=dat2, obsdat=obsdat, expand=expand, points=points, ls='solid' )
    # ax2.text( 0.05, 0.95, 'Type II', transform=ax2.transAxes, ha='left', va='top', fontsize='large' )
    ax2.text( 0.05, 0.95, 'Type II\n Visibility\n Windows\n for %02i min \n F110W snaps'%etime, transform=ax2.transAxes, ha='left', va='top', fontsize='large' )
    ax2.text( 1.72,22.4,'130 days', rotation=74, color='darkred', backgroundcolor='w', ha='center', fontsize=12 )
    ax2.text( 1.87,22.4,'100', ha='center', rotation=72, color='darkorange', backgroundcolor='w',fontsize=12 )
    ax2.text( 2.25,22.4,'70', ha='center', rotation=74, color='darkcyan', backgroundcolor='w',fontsize=12 )
    ax2.text( 2.75,22.4,'40', ha='center', rotation=76, color='darkblue', backgroundcolor='w',fontsize=12 )
    ax2.text( 3.1, 22.4,'10', ha='center', rotation=78, color='darkorchid', backgroundcolor='w',fontsize=12 )

    ax2.yaxis.set_ticks_position('right')
    ax2.yaxis.set_ticks_position('both')
    ax2.yaxis.set_label_position('right')
    ax2.set_ylabel( 'Magnification, $\mu$', labelpad=20, rotation=-90 )
    fig = pl.gcf()
    fig.subplots_adjust( left=0.08,bottom=0.13, right=0.92, top=0.95, wspace=0.05 )
    pl.draw()

def plot_tvis_contours( dat='snIa_tvis.dat', obsdat=_datfile, 
                        expand=False, points=True, ls='solid' ):
    """ Plot SN visibility time contours in the mu vs redshift plane
    """

    if isinstance( dat, str ) :
        dat = ascii.read( dat, header_start=2 )

    # Read in the grid of simulated visibility times
    zgrid = dat['z']
    mugrid =  np.array([ int(col[-2:]) for col in dat.colnames
                     if col.startswith('tvis') ] )
    tvismatrix = np.array( [dat['tvis%02i'%mu] for mu in mugrid ] )

    # Read in the A1689 multiply imaged galaxy catalog
    if isinstance( obsdat, str ) :
        obsdat = ascii.read(obsdat)
    igal = obsdat['gal']
    # iim = obsdat['im']
    zobs = np.abs(obsdat['z'])  # negative z's are photoz
    muobs = obsdat['mu']
    # itoohigh = np.where(muobs>25)[0]
    # muobs[itoohigh] = np.random.random(len(itoohigh))*10+20
    idx = obsdat['idx'] - 1

    if expand :
        # Expand the A1689 catalog by a factor of x, applying random offsets to
        # get a mock catalog representing the full sample
        zoffsets = np.random.normal(loc=0.0, scale=0.3, size=len(zobs)*expand)
        zx = np.array( expand * zobs.tolist() ) + zoffsets
        muoffsets = np.random.normal(loc=0.0, scale=1.0, size=len(muobs)*expand)
        mux = np.abs( np.array(expand * muobs.tolist() ) + muoffsets )
        idxx = np.array( expand * idx.tolist() )
        igalx = np.array( expand * igal.tolist() )
        zobs = zx
        muobs = mux
        idx = idxx
        igal = igalx

    # isolate the leading images (any images that
    # have later images from which a time delay
    # could be measured.
    muMI, zMI = [], []
    muLast, zLast = [], []
    for ig in np.unique(igal):
        idx_thisgal = idx[np.where(igal == ig)]
        mu_thisgal = sorted( muobs[idx_thisgal] )
        muMI += mu_thisgal[:len(mu_thisgal)-1]
        zMI += zobs[idx_thisgal][:len(mu_thisgal)-1].tolist()
        muLast.append( mu_thisgal[-1] )
        zLast.append( zobs[idx_thisgal][-1] )

    ax = pl.gca()

    ax.set_xlim( 1, 3.2 )
    ax.set_ylim( 1.01, 25 )

    # zmuhistMI, xedges, yedges = np.histogram2d(
    #     muMI, zMI, bins=20, range=[[1,25],[1,3.5]] )

    zmuhist, xedges, yedges = np.histogram2d(
        muobs, zobs, bins=20, range=[[1,25],[1,3.5]] )

    if points :
        pl.plot(zMI, muMI, color='k', marker='o', alpha=0.3,
                ms=10, ls=' ')
        pl.plot(zLast, muLast, color='r', marker='s', alpha=0.3,
                ms=10, ls=' ')
    else :
        ax.imshow( zmuhist, cmap=cm.Greys, origin='lower',
                   extent=(yedges[0],yedges[-1],xedges[0],xedges[-1]), )
                   # vmin=0.5, vmax=3 )

    #ax.contourf( zmuhist2d, 3, cmap=cm.Greys, origin='lower',
    #             extent=(yedges[0],yedges[-1],xedges[0],xedges[-1]) )
    # pl.colorbar()

    colorlist = ['darkorchid','darkblue','darkcyan',# 'forestgreen',
                 'darkorange','darkred']
    levels = [10,40,70,100,130]
    CS = pl.contour( zgrid, mugrid, tvismatrix, levels=levels, colors=colorlist, linestyles=ls )

    ax.set_xlabel('Source Redshift')
    ax.set_ylabel('Magnification, $\mu$')

    # pl.clabel(CS, levels, inline=True, fontsize=14, fmt='%i' )
    # return( zmuhistMI, xedges, yedges )




def print_tvis_means( tvisfile='lensed_galaxies_tvis.dat' ):
    """Read in the tvis data for all the lensed galaxies
    in our observed data set. Compute and print the mean
    visibility time for Ia and II for 12,20,30-min snaps.
    """
    from astropy.io import ascii
    tvisdat = ascii.read( tvisfile )
    pl.clf()

    # TODO : isolate the time-delay capable images

    igal = tvisdat['gal']
    idx = tvisdat['idx'] - 1
    muobs = tvisdat['mu']

    iTD = []
    iLast = []
    for ig in np.unique(igal):
        idx_thisgal = idx[np.where(igal == ig)]
        ithisgalLast = np.argsort( muobs[idx_thisgal] )
        iLast.append( idx_thisgal[ithisgalLast[-1]])
        iTD += idx_thisgal[ithisgalLast[:-1]].tolist()

    # hist12, binedges = np.histogram( tvisIa_12, bins=np.arange(1,150,10) )
    # hist20, binedges = np.histogram( tvisIa_20, bins=np.arange(1,150,10) )
    # hist30, binedges = np.histogram( tvisIa_30, bins=np.arange(1,150,10) )
    # pl.bar( binedges[:-1], hist12, width=10, color='b', alpha=0.3, linewidth=1 )
    # pl.bar( binedges[:-1], hist20, width=10, color='g', alpha=0.3, linewidth=1 )
    # pl.bar( binedges[:-1], hist30, width=10, color='r', alpha=0.3, linewidth=1 )

    # pl.plot( binedges[:-1], hist12, drawstyle='steps-mid', color='b', linewidth=1 )
    # pl.plot( binedges[:-1], hist20, drawstyle='steps-mid', color='g', linewidth=1 )
    # pl.plot( binedges[:-1], hist30, drawstyle='steps-mid', color='r', linewidth=1 )

    print( '30min : %02i days  %02i days'%( np.mean( tvisdat['tvisIa_30'][iTD] ), np.mean( tvisdat['tvisII_30'][iTD] ) ) )
    print( '20min : %02i days  %02i days'%( np.mean( tvisdat['tvisIa_20'][iTD] ), np.mean( tvisdat['tvisII_20'][iTD] ) ) )
    print( '12min : %02i days  %02i days'%( np.mean( tvisdat['tvisIa_12'][iTD] ), np.mean( tvisdat['tvisII_12'][iTD] ) ) )


    # return( tvisIa_12, tvisIa_20, tvisIa_30 )





def mk_lightcurve_fig(  ):
    from hstsnpipe.tools import snana
    from hstsnpipe.tools.figs import plotsetup
    plotsetup.fullpaperfig( figsize=[8,4] )
    pl.clf()

    simIa = snana.SimTable( 'snIa_zgrid' )
    FLTMATRIX = simIa.FLT.reshape( simIa.LCMATRIX.shape )
    bandlist = FLTMATRIX[0,0,0,0,:,0]
    def iband(band) : 
        return( np.where( bandlist==band )[0][0] )
    iz18 = np.argmin( np.abs( simIa.z-1.8 ) )
    ilp0 = np.argmin( np.abs( simIa.x1 ) )
    iF160W = iband('H')
    iF140W = iband('N')
    iF110W = iband('M')
    muIa = 5.

    ax1 = pl.subplot(121)
    ax2 = pl.subplot(122, sharex=ax1 )
    # snIaMAGH = simIa.LCMATRIX[ ilp0, 0, 0, iz18, iF160W, : ]
    snIaMAGN = vega2ab( simIa.LCMATRIX[ ilp0, 0, 0, iz18, iF140W, : ], 'F140W' )
    snIaMAGM = vega2ab( simIa.LCMATRIX[ ilp0, 0, 0, iz18, iF110W, : ], 'F140W' )
    snIaMJD = simIa.TOBS[ iz18, : ]

    # ax1.plot( snIaMJD, snIaMAGH - 2.5*np.log10( muIa ), 'k-', lw=2, marker=' ', )
    ax1.plot( snIaMJD, snIaMAGN - 2.5*np.log10( muIa ), 'r-', lw=2, marker=' ', )
    ax2.plot( snIaMJD, snIaMAGM - 2.5*np.log10( muIa ), 'r-', lw=2, marker=' ', )
    ax1.invert_yaxis()

    simII = snana.SimTable( 'snII_zgrid' )
    FLTMATRIX = simII.FLT.reshape( simII.LCMATRIX.shape )
    bandlist = FLTMATRIX[0,0,0,0,:,0]
    def iband(band) : 
        return( np.where( bandlist==band )[0][0] )
    iz20 = np.argmin( np.abs( simII.z-2.0 ) )
    iF140W = iband('N')
    iF110W = iband('M')
    muII = 12.
    ilpII=13  # select one representative II-P model

    snIIMAGN = vega2ab( simII.LCMATRIX[ ilpII, 0, 0, iz20, iF140W, : ], 'F140W' )
    snIIMAGM = vega2ab( simII.LCMATRIX[ ilpII, 0, 0, iz20, iF110W, : ], 'F110W' )
    snIIMJD = simII.TOBS[ iz20, : ]
    ax1.plot( snIIMJD, snIIMAGN - 2.5*np.log10( muII ), 'b--', lw=2, marker=' ', )
    ax2.plot( snIIMJD, snIIMAGM - 2.5*np.log10( muII ), 'b--', lw=2, marker=' ', )

    ax1.axhline( vega2ab( 24.6, 'f140w'), color='k',ls=':', lw=2, )
    ax2.axhline( vega2ab( 25.3, 'f110w'), color='k',ls=':', lw=2, )

    # ax2.text(0.95,0.95,'F160W', fontsize='large', ha='right',va='top', transform=ax2.transAxes )
    ax1.text(0.95,0.95,'F140W', fontsize='large', ha='right',va='top', transform=ax1.transAxes )
    ax2.text(0.95,0.95,'F110W', fontsize='large', ha='right',va='top', transform=ax2.transAxes )

    ax1.text( 115, 25.65, '30 min SNAP\n detection limit', ha='right',va='bottom')
    # ax2.text( 115, 26.0, '30 min SNAP\n detection limit', ha='right',va='bottom')

    ax1.text( 38, 25.3, 'Type Ia SN\n z=1.8, $\mu$=5\n t$_{vis}$=75 days', ha='left',va='bottom', color='r', fontsize='large')
    # ax2.text( 25, 25.5, 'Type II-P SN\n z=2.0, $\mu$=12\n t$_{vis}$=50 days', ha='left',va='center', color='b', fontsize='large')
    # ax1.text( 67, 25.6, 'Type II-P SN\n z=2.0, $\mu$=12\n t$_{vis}$=50 days', ha='left',va='top', color='b', fontsize='large', backgroundcolor='w' )
    ax2.text( 67.5, 26.15, 'Type II-P SN\n z=2.0, $\mu$=12\n t$_{vis}$=50 days', ha='left',va='top', color='b', fontsize='large', backgroundcolor='w' )

    ax1.set_xlim(-35,119)
    ax1.set_ylim(27, 27-2.51)
    ax2.set_ylim(27.4, 27.4-2.51)
    ax2.yaxis.set_ticks_position('right')
    ax2.yaxis.set_ticks_position('both')
    ax2.yaxis.set_label_position('right')
    fig = pl.gcf()
    fig.subplots_adjust( left=0.13, right=0.87, bottom=0.12, top=0.95, wspace=0.05 )
    ax2.set_xlabel('Observer-frame Time [days]')
    ax1.set_xlabel('Observer-frame Time [days]')
    ax1.set_ylabel('Observed F140W magnitue [AB]')
    ax2.set_ylabel('Observed F110W magnitue [AB]', labelpad=20, rotation=-90)


ZPT_WFC3_IR_AB = {'F105W':26.0974,
                  'F110W':26.6424,
                  'F125W':26.0449,
                  'F140W':26.2608,
                  'F160W':25.7551,
                  'F098M':25.5041,
                  'F127M':24.4545,
                  'F139M':24.2880,
                  'F153M':24.2725 }

ZPT_WFC3_IR_VEGA = {'F105W':25.4523,
                    'F110W':25.8829,
                    'F125W':25.1439,
                    'F140W':25.1845,
                    'F160W':24.5037,
                    'F098M':24.9424,
                    'F127M':23.4932,
                    'F139M':23.2093,
                    'F153M':23.0188 }

def vega2ab( magVega, filter ):
    zptAB = ZPT_WFC3_IR_AB[filter.upper()]
    zptVega = ZPT_WFC3_IR_VEGA[filter.upper()]
    return( magVega  - zptVega + zptAB )


def plot_pkmags_AB( simIa ):

    Hpk = vega2ab( simIa.LCMATRIX[7,0,0,:,4,19], 'F160W' )
    Npk = vega2ab( simIa.LCMATRIX[7,0,0,:,3,19], 'F140W' )
    Jpk = vega2ab( simIa.LCMATRIX[7,0,0,:,2,19], 'F125W' )
    Mpk = vega2ab( simIa.LCMATRIX[7,0,0,:,1,19], 'F110W' )
    Ypk = vega2ab( simIa.LCMATRIX[7,0,0,:,0,19], 'F105W' )

    pl.clf()
    ax = pl.gca()

    ax.plot( simIa.z, Hpk, 'r-' )
    ax.plot( simIa.z, Npk, color='darkorange', ls='-', marker=' ')
    ax.plot( simIa.z, Jpk, 'g-' )
    ax.plot( simIa.z, Mpk, 'b-' )
    ax.plot( simIa.z, Jpk, 'g-' )
    ax.plot( simIa.z, Mpk, 'b-' )
    ax.plot( simIa.z, Ypk, color='darkorchid', ls='-', marker=' ' )

    ax.set_xlabel('Redshift')
    ax.set_ylabel('SN Ia peak magnitude (AB)')
    ax.invert_yaxis()
    ax.set_xlim(0.9,3.49)
    ax.set_ylim(32.5,24.5)

    Htxt = ax.text( 3.3, 28.9, 'F160W', backgroundcolor='w', ha='center', va='center', color='r' )
    Ntxt = ax.text( 3.3, 29.6, 'F140W', backgroundcolor='w', ha='center', va='center', color='darkorange' )
    Jtxt = ax.text( 3.3, 31.4, 'F125W', backgroundcolor='w', ha='center', va='center', color='g' )
    Mtxt = ax.text( 3.3, 32.0, 'F110W', backgroundcolor='w', ha='center', va='center', color='b' )
    Mtxt = ax.text( 2.9, 32.2, 'F105W', backgroundcolor='w', ha='center', va='center', color='darkorchid' )


def main(argv):
    if argv is None :
        argv == sys.argv

    maghist()

if __name__ == "__main__" :
    main(None)
